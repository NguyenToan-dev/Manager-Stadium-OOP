#include "PriceWindow.h"
#include <QWidget>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QTimeEdit>
#include <QSpinBox>
#include <QPushButton>
#include <QCoreApplication>
#include <QLabel>
#include <QFile>
#include <QDir>
#include <QMessageBox>

QString PriceWindow::removeAccents(const QString& input) {
    QString output = input;
    static const QMap<QChar, QChar> accentMap = {
        // a
        {L'√°', L'a'}, {L'√†', L'a'}, {L'·∫£', L'a'}, {L'√£', L'a'}, {L'·∫°', L'a'},
        {L'ƒÉ', L'a'}, {L'·∫Ø', L'a'}, {L'·∫±', L'a'}, {L'·∫≥', L'a'}, {L'·∫µ', L'a'}, {L'·∫∑', L'a'},
        {L'√¢', L'a'}, {L'·∫•', L'a'}, {L'·∫ß', L'a'}, {L'·∫©', L'a'}, {L'·∫´', L'a'}, {L'·∫≠', L'a'},
        // e
        {L'√©', L'e'}, {L'√®', L'e'}, {L'·∫ª', L'e'}, {L'·∫Ω', L'e'}, {L'·∫π', L'e'},
        {L'√™', L'e'}, {L'·∫ø', L'e'}, {L'·ªÅ', L'e'}, {L'·ªÉ', L'e'}, {L'·ªÖ', L'e'}, {L'·ªá', L'e'},
        // i
        {L'√≠', L'i'}, {L'√¨', L'i'}, {L'·ªâ', L'i'}, {L'ƒ©', L'i'}, {L'·ªã', L'i'},
        // o
        {L'√≥', L'o'}, {L'√≤', L'o'}, {L'·ªè', L'o'}, {L'√µ', L'o'}, {L'·ªç', L'o'},
        {L'√¥', L'o'}, {L'·ªë', L'o'}, {L'·ªì', L'o'}, {L'·ªï', L'o'}, {L'·ªó', L'o'}, {L'·ªô', L'o'},
        {L'∆°', L'o'}, {L'·ªõ', L'o'}, {L'·ªù', L'o'}, {L'·ªü', L'o'}, {L'·ª°', L'o'}, {L'·ª£', L'o'},
        // u
        {L'√∫', L'u'}, {L'√π', L'u'}, {L'·ªß', L'u'}, {L'≈©', L'u'}, {L'·ª•', L'u'},
        {L'∆∞', L'u'}, {L'·ª©', L'u'}, {L'·ª´', L'u'}, {L'·ª≠', L'u'}, {L'·ªØ', L'u'}, {L'·ª±', L'u'},
        // y
        {L'√Ω', L'y'}, {L'·ª≥', L'y'}, {L'·ª∑', L'y'}, {L'·ªπ', L'y'}, {L'·ªµ', L'y'},
        // ƒë
        {L'ƒë', L'd'},

        // A
        {L'√Å', L'A'}, {L'√Ä', L'A'}, {L'·∫¢', L'A'}, {L'√É', L'A'}, {L'·∫†', L'A'},
        {L'ƒÇ', L'A'}, {L'·∫Æ', L'A'}, {L'·∫∞', L'A'}, {L'·∫≤', L'A'}, {L'·∫¥', L'A'}, {L'·∫∂', L'A'},
        {L'√Ç', L'A'}, {L'·∫§', L'A'}, {L'·∫¶', L'A'}, {L'·∫®', L'A'}, {L'·∫™', L'A'}, {L'·∫¨', L'A'},
        // E
        {L'√â', L'E'}, {L'√à', L'E'}, {L'·∫∫', L'E'}, {L'·∫º', L'E'}, {L'·∫∏', L'E'},
        {L'√ä', L'E'}, {L'·∫æ', L'E'}, {L'·ªÄ', L'E'}, {L'·ªÇ', L'E'}, {L'·ªÑ', L'E'}, {L'·ªÜ', L'E'},
        // I
        {L'√ç', L'I'}, {L'√å', L'I'}, {L'·ªà', L'I'}, {L'ƒ®', L'I'}, {L'·ªä', L'I'},
        // O
        {L'√ì', L'O'}, {L'√í', L'O'}, {L'·ªé', L'O'}, {L'√ï', L'O'}, {L'·ªå', L'O'},
        {L'√î', L'O'}, {L'·ªê', L'O'}, {L'·ªí', L'O'}, {L'·ªî', L'O'}, {L'·ªñ', L'O'}, {L'·ªò', L'O'},
        {L'∆†', L'O'}, {L'·ªö', L'O'}, {L'·ªú', L'O'}, {L'·ªû', L'O'}, {L'·ª†', L'O'}, {L'·ª¢', L'O'},
        // U
        {L'√ö', L'U'}, {L'√ô', L'U'}, {L'·ª¶', L'U'}, {L'≈®', L'U'}, {L'·ª§', L'U'},
        {L'∆Ø', L'U'}, {L'·ª®', L'U'}, {L'·ª™', L'U'}, {L'·ª¨', L'U'}, {L'·ªÆ', L'U'}, {L'·ª∞', L'U'},
        // Y
        {L'√ù', L'Y'}, {L'·ª≤', L'Y'}, {L'·ª∂', L'Y'}, {L'·ª∏', L'Y'}, {L'·ª¥', L'Y'},
        // ƒê
        {L'ƒê', L'D'}
    };

    for (int i = 0; i < output.length(); ++i) {
        if (accentMap.contains(output[i])) {
            output[i] = accentMap[output[i]];
        }
    }

    return output;
}

PriceWindow::PriceWindow(const QString& sport, const QString& field, QWidget* parent)
    : QWidget(parent), sportName(sport), fieldName(field) {

    setWindowTitle("T√πy ch·ªânh gi√°: " + field);
    setFixedSize(400, 400);
    QVBoxLayout* layout = new QVBoxLayout(this);

    setStyleSheet(R"(
        PriceWindow {
            background-color: #3e4a59;
            font-family: "Segoe UI", sans-serif;
            font-size: 14px;
        }

        QLabel {
            color: #ffffff;
            background: transparent;
        }

        /* N√∫t remove (‚ùå) theo style backButton */
        QPushButton[text="‚ùå"] {
            background-color: #34495e;
            color: #ffffff;
            border: 1px solid #4a637d;
            border-radius: 4px;
        }
        QPushButton[text="‚ùå"]:hover {
            background-color: #4a637d;
        }

        /* N√∫t th√™m + l∆∞u: d√πng style n√∫t ch√≠nh trong theme app */
        QPushButton#addButton, QPushButton#saveButton {
            background-color: #34495e;
            color: white;
            border-radius: 6px;
            font-weight: bold;
            padding: 8px 14px;
        }
        QPushButton#addButton:hover, QPushButton#saveButton:hover {
            background-color: #4a637d;
        }
    )");

    entryLayout = new QVBoxLayout;
    layout->addLayout(entryLayout);

    QPushButton* addButton = new QPushButton("‚ûï Th√™m khung gi·ªù");
    addButton->setObjectName("addButton");
    QPushButton* saveButton = new QPushButton("üíæ L∆∞u");
    saveButton->setObjectName("saveButton");

    layout->addWidget(addButton);
    layout->addWidget(saveButton);
    layout->addStretch();

    connect(addButton, &QPushButton::clicked, this, [=]() {
        addTimeEntry();
    });

    connect(saveButton, &QPushButton::clicked, this, [=]() {
        saveToFile();
        QMessageBox msgBox(this);
        msgBox.setWindowTitle("L∆∞u th√†nh c√¥ng");
        msgBox.setText("ƒê√£ l∆∞u gi√° t√πy ch·ªânh.");
        msgBox.setIcon(QMessageBox::Information);

        msgBox.setStyleSheet(R"(
            QMessageBox {
                background-color: #3e4a59;
                color: #e0e0e0;
                font-size: 13px;
                font-weight: 500;
            }
            QPushButton {
                background-color: #0d6efd;
                color: white;
                border-radius: 4px;
                padding: 6px 12px;
                min-width: 80px;
            }
            QPushButton:hover {
                background-color: #0b5ed7;
            }
        )");

        msgBox.exec();
        close();
    });

    loadExisting();
}

void PriceWindow::addTimeEntry(const QTime& from, const QTime& to, int price) {
    QHBoxLayout* row = new QHBoxLayout;

    QTimeEdit* fromEdit = new QTimeEdit(from.isValid() ? from : QTime(5, 0));
    QTimeEdit* toEdit = new QTimeEdit(to.isValid() ? to : QTime(6, 0));

    fromEdit->setDisplayFormat("hh:mm");
    toEdit->setDisplayFormat("hh:mm");

    // ‚è∞ Gi·ªõi h·∫°n t·ª´ 05:00 ƒë·∫øn 22:00
    fromEdit->setMinimumTime(QTime(5, 0));
    fromEdit->setMaximumTime(QTime(22, 0));
    toEdit->setMinimumTime(QTime(5, 0));
    toEdit->setMaximumTime(QTime(22, 0));

    toEdit->setMinimumTime(fromEdit->time());
    connect(fromEdit, &QTimeEdit::timeChanged, this, [=]() {
        toEdit->setMinimumTime(fromEdit->time());
    });

    QSpinBox* priceBox = new QSpinBox;
    priceBox->setRange(0, 10000000);
    priceBox->setValue(price);
    priceBox->setSuffix(" ƒë");

    QPushButton* removeButton = new QPushButton("‚ùå");
    removeButton->setFixedWidth(30);

    row->addWidget(new QLabel("T·ª´:"));
    row->addWidget(fromEdit);
    row->addWidget(new QLabel("  ‚Üí"));
    row->addWidget(toEdit);
    row->addWidget(new QLabel("Gi√°:"));
    row->addWidget(priceBox);
    row->addWidget(removeButton);

    QWidget* rowWidget = new QWidget;
    rowWidget->setLayout(row);
    entryLayout->addWidget(rowWidget);

    connect(removeButton, &QPushButton::clicked, this, [=]() {
        entryLayout->removeWidget(rowWidget);
        rowWidget->deleteLater();
    });
}

void PriceWindow::loadExisting() {
    QString dirPath = QCoreApplication::applicationDirPath() + "/data/price/" + sportName;
    QString filePath = dirPath + "/" + removeAccents(fieldName).replace(" ", "_") + ".txt";

    QFile file(filePath);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) return;

    while (!file.atEnd()) {
        QString line = file.readLine().trimmed();
        if (line.isEmpty()) continue;

        QStringList parts = line.split('-');
        if (parts.size() < 3) continue;

        QTime from = QTime::fromString(parts[0], "hh:mm");
        QTime to = QTime::fromString(parts[1], "hh:mm");
        int price = parts[2].toInt();
        if (from.isValid() && to.isValid() && price > 0) {
            addTimeEntry(from, to, price);
        }
    }
}

struct TimeRange {
    QTime from;
    QTime to;
    int price;
};

bool isOverlap(const QTime& f1, const QTime& t1, const QTime& f2, const QTime& t2) {
    return f1 < t2 && f2 < t1;
}

void PriceWindow::saveToFile() {
    QString dirPath = QCoreApplication::applicationDirPath() + "/data/price/" + sportName;
    QDir().mkpath(dirPath);
    QString filePath = dirPath + "/" + removeAccents(fieldName).replace(" ", "_") + ".txt";

    QFile file(filePath);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text | QFile::Truncate)) return;

    QList<TimeRange> result;

    for (int i = 0; i < entryLayout->count(); ++i) {
        QWidget* rowWidget = entryLayout->itemAt(i)->widget();
        if (!rowWidget) continue;

        QList<QTimeEdit*> edits = rowWidget->findChildren<QTimeEdit*>();
        QList<QSpinBox*> boxes = rowWidget->findChildren<QSpinBox*>();
        if (edits.size() == 2 && !boxes.isEmpty()) {
            QTime from = edits[0]->time();
            QTime to = edits[1]->time();
            int price = boxes[0]->value();

            if (from < QTime(5, 0) || to > QTime(22, 0) || from >= to) continue;

            QList<TimeRange> updated;

            for (const TimeRange& existing : result) {
                if (!isOverlap(existing.from, existing.to, from, to)) {
                    updated.append(existing);
                } else {
                    if (existing.from < from) {
                        updated.append({existing.from, from, existing.price});
                    }
                    if (existing.to > to) {
                        updated.append({to, existing.to, existing.price});
                    }
                }
            }

            // Th√™m khung m·ªõi
            updated.append({from, to, price});
            result = updated;
        }
    }

    std::sort(result.begin(), result.end(), [](const TimeRange& a, const TimeRange& b) {
        return a.from < b.from;
    });

    QTextStream out(&file);
    for (const auto& r : result) {
        out << r.from.toString("hh:mm") << "-" << r.to.toString("hh:mm") << "-" << r.price << "\n";
    }

    file.close();
}
